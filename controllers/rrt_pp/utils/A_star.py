import heapq
import math
import matplotlib.pyplot as plt

class AStar:
    def __init__(self, points, graph, start_index, goal_index):
        self.points = points
        self.graph = graph
        self.start_index = start_index
        self.goal_index = goal_index

        self.open_list = []  
        heapq.heappush(self.open_list, (0, start_index))  
        self.came_from = {}  
        self.g_scores = {index: math.inf for index in range(len(points))}  
        self.g_scores[start_index] = 0

        self.f_scores = {index: math.inf for index in range(len(points))}  
        self.f_scores[start_index] = self.heuristic(start_index, goal_index)

    def heuristic(self, node_index, goal_index):
        node = self.points[node_index]
        goal = self.points[goal_index]
        return math.sqrt((goal[0] - node[0]) ** 2 + (goal[1] - node[1]) ** 2)

    def reconstruct_path(self, current_index):
        path = [current_index]
        while current_index in self.came_from:
            current_index = self.came_from[current_index]
            path.append(current_index)
        path.reverse()
        return path

    def update_graph(self, new_graph):
        self.graph = new_graph

    def astar_search(self, new_goal_index=None, new_graph=None, new_start_index=None):
        if new_goal_index is not None:
            self.goal_index = new_goal_index
        if new_graph is not None:
            self.update_graph(new_graph)
        if new_start_index is not None:
            self.start_index = new_start_index

        start_index = int(self.start_index)  # Convert to integer if it's a string
        goal_index = int(self.goal_index)  # Convert to integer if it's a string

        self.open_list = []
        heapq.heappush(self.open_list, (0, start_index))
        self.came_from = {}
        self.g_scores = {index: math.inf for index in range(len(self.points))}
        self.g_scores[start_index] = 0
        self.f_scores = {index: math.inf for index in range(len(self.points))}
        self.f_scores[start_index] = self.heuristic(start_index, goal_index)

        while self.open_list:
            _, current_index = heapq.heappop(self.open_list)
            if current_index == goal_index:
                return self.reconstruct_path(current_index)

            if current_index not in self.graph:
                continue

            for neighbor_index, cost in self.graph[current_index].items():
                neighbor_index = int(neighbor_index)  # Convert to integer if it's a string
                tentative_g_score = self.g_scores[current_index] + cost
                if tentative_g_score < self.g_scores[neighbor_index]:
                    self.came_from[neighbor_index] = current_index
                    self.g_scores[neighbor_index] = tentative_g_score
                    self.f_scores[neighbor_index] = tentative_g_score + self.heuristic(neighbor_index, goal_index)
                    heapq.heappush(self.open_list, (self.f_scores[neighbor_index], neighbor_index))

        return None
    
    def plot_graph(self, shortest_path_indices=None):
        plt.figure(figsize=(8, 8))
        for node_index, edges in self.graph.items():
            node = self.points[node_index]
            if shortest_path_indices and node_index in shortest_path_indices:
                plt.plot(node[0], node[1], 'go')  
            else:
                plt.plot(node[0], node[1], 'ro')  

            for neighbor_index, cost in edges.items():
                neighbor = self.points[neighbor_index]
                plt.plot([node[0], neighbor[0]], [node[1], neighbor[1]], 'b-', linewidth=0.5)
                plt.text((node[0] + neighbor[0]) / 2, (node[1] + neighbor[1]) / 2, f'{cost:.2f}', fontsize=8)

        plt.xlabel('X')
        plt.ylabel('Y')
        plt.title('Graph with Nodes and Connections')
        plt.grid(True)
        plt.axis('equal')  
        plt.show()

if __name__ == '__main__':
    # Example usage
    points = [(0, -4.0), (0, -3.0), (0, -2.0), (0, -1.0), (0, 0.0), (0, 1.0), (0, 2.0), (0, 3.0), (0, 4.0), (-2, -4.0), (-2, -3.0), (-2, -2.0), (-2, -1.0), (-2, 0.0), (-2, 1.0), (-2, 2.0), (-2, 3.0), (-2, 4.0), (-4, -4.0), (-4, -3.0), (-4, -2.0), (-4, -1.0), (-4, 0.0), (-4, 1.0), (-4, 2.0), (-4, 3.0), (-4, 4.0), (-6, -4.0), (-6, -3.0), (-6, -2.0), (-6, -1.0), (-6, 0.0), (-6, 1.0), (-6, 2.0), (-6, 3.0), (-6, 4.0), (-8, -4.0), (-8, -3.0), (-8, -2.0), (-8, -1.0), (-8, 0.0), (-8, 1.0), (-8, 2.0), (-8, 3.0), (-8, 4.0), (-10, -4.0), (-10, -3.0), (-10, -2.0), (-10, -1.0), (-10, 0.0), (-10, 1.0), (-10, 2.0), (-10, 3.0), (-10, 4.0), (-12, -4.0), (-12, -3.0), (-12, -2.0), (-12, -1.0), (-12, 0.0), (-12, 1.0), (-12, 2.0), (-12, 3.0), (-12, 4.0), (-14, -4.0), (-14, -3.0), (-14, -2.0), (-14, -1.0), (-14, 0.0), (-14, 1.0), (-14, 2.0), (-14, 3.0), (-14, 4.0), (-16, -4.0), (-16, -3.0), (-16, -2.0), (-16, -1.0), (-16, 0.0), (-16, 1.0), (-16, 2.0), (-16, 3.0), (-16, 4.0), (-18, -4.0), (-18, -3.0), (-18, -2.0), (-18, -1.0), (-18, 0.0), (-18, 1.0), (-18, 2.0), (-18, 3.0), (-18, 4.0)]
    graph =  {0: {1: 1.0, 2: 2.0, 9: 2.0, 10: 2.23606797749979}, 1: {0: 1.0, 2: 1.0, 3: 2.0, 9: 2.23606797749979, 10: 2.0, 11: 2.23606797749979}, 2: {0: 2.0, 1: 1.0, 3: 1.0, 4: 2.0, 10: 2.23606797749979, 11: 2.0, 12: 2.23606797749979}, 3: {1: 2.0, 2: 1.0, 4: 1.0, 5: 2.0, 11: 2.23606797749979, 12: 2.0, 13: 2.23606797749979}, 4: {2: 2.0, 3: 1.0, 5: 1.0, 6: 2.0, 12: 2.23606797749979, 13: 2.0, 14: 2.23606797749979}, 5: {3: 2.0, 4: 1.0, 6: 1.0, 7: 2.0, 13: 2.23606797749979, 14: 2.0, 15: 2.23606797749979}, 6: {4: 2.0, 5: 1.0, 7: 1.0, 8: 2.0, 14: 2.23606797749979, 15: 2.0, 16: 2.23606797749979}, 7: {5: 2.0, 6: 1.0, 8: 1.0, 15: 2.23606797749979, 16: 2.0, 17: 2.23606797749979}, 8: {6: 2.0, 7: 1.0, 16: 2.23606797749979, 17: 2.0}, 9: {0: 2.0, 1: 2.23606797749979, 10: 1.0, 11: 2.0, 18: 2.0, 19: 2.23606797749979}, 10: {0: 2.23606797749979, 1: 2.0, 2: 2.23606797749979, 9: 1.0, 11: 1.0, 12: 2.0, 18: 2.23606797749979, 19: 2.0, 20: 2.23606797749979}, 11: {1: 2.23606797749979, 2: 2.0, 3: 2.23606797749979, 9: 2.0, 10: 1.0, 12: 1.0, 13: 2.0, 19: 2.23606797749979, 20: 2.0, 21: 2.23606797749979}, 12: {2: 2.23606797749979, 3: 2.0, 4: 2.23606797749979, 10: 2.0, 11: 1.0, 13: 1.0, 14: 2.0, 20: 2.23606797749979, 21: 2.0, 22: 2.23606797749979}, 13: {3: 2.23606797749979, 4: 2.0, 5: 2.23606797749979, 11: 2.0, 12: 1.0, 14: 1.0, 15: 2.0, 21: 2.23606797749979, 22: 2.0, 23: 2.23606797749979}, 14: {4: 2.23606797749979, 5: 2.0, 6: 2.23606797749979, 12: 2.0, 13: 1.0, 15: 1.0, 16: 2.0, 22: 2.23606797749979, 23: 2.0, 24: 2.23606797749979}, 15: {5: 2.23606797749979, 6: 2.0, 7: 2.23606797749979, 13: 2.0, 14: 1.0, 16: 1.0, 17: 2.0, 23: 2.23606797749979, 24: 2.0, 25: 2.23606797749979}, 16: {6: 2.23606797749979, 7: 2.0, 8: 2.23606797749979, 14: 2.0, 15: 1.0, 17: 1.0, 24: 2.23606797749979, 25: 2.0, 26: 2.23606797749979}, 17: {7: 2.23606797749979, 8: 2.0, 15: 2.0, 16: 1.0, 25: 2.23606797749979, 26: 2.0}, 18: {9: 2.0, 10: 2.23606797749979, 19: 1.0, 20: 2.0, 27: 2.0, 28: 2.23606797749979}, 19: {9: 2.23606797749979, 10: 2.0, 11: 2.23606797749979, 18: 1.0, 20: 1.0, 21: 2.0, 27: 2.23606797749979, 28: 2.0, 29: 2.23606797749979}, 20: {10: 2.23606797749979, 11: 2.0, 12: 2.23606797749979, 18: 2.0, 19: 1.0, 21: 1.0, 22: 2.0, 28: 2.23606797749979, 29: 2.0, 30: 2.23606797749979}, 21: {11: 2.23606797749979, 12: 2.0, 13: 2.23606797749979, 19: 2.0, 20: 1.0, 22: 1.0, 23: 2.0, 29: 2.23606797749979, 30: 2.0, 31: 2.23606797749979}, 22: {12: 2.23606797749979, 13: 2.0, 14: 2.23606797749979, 20: 2.0, 21: 1.0, 23: 1.0, 24: 2.0, 30: 2.23606797749979, 31: 2.0, 32: 2.23606797749979}, 23: {13: 2.23606797749979, 14: 2.0, 15: 2.23606797749979, 21: 2.0, 22: 1.0, 24: 1.0, 25: 2.0, 31: 2.23606797749979, 32: 2.0, 33: 2.23606797749979}, 24: {14: 2.23606797749979, 15: 2.0, 16: 2.23606797749979, 22: 2.0, 23: 1.0, 25: 1.0, 26: 2.0, 32: 2.23606797749979, 33: 2.0, 34: 2.23606797749979}, 25: {15: 2.23606797749979, 16: 2.0, 17: 2.23606797749979, 23: 2.0, 24: 1.0, 26: 1.0, 33: 2.23606797749979, 34: 2.0, 35: 2.23606797749979}, 26: {16: 2.23606797749979, 17: 2.0, 24: 2.0, 25: 1.0, 34: 2.23606797749979, 35: 2.0}, 27: {18: 2.0, 19: 2.23606797749979, 28: 1.0, 29: 2.0, 36: 2.0, 37: 2.23606797749979}, 28: {18: 2.23606797749979, 19: 2.0, 20: 2.23606797749979, 27: 1.0, 29: 1.0, 30: 2.0, 36: 2.23606797749979, 37: 2.0, 38: 2.23606797749979}, 29: {19: 2.23606797749979, 20: 2.0, 21: 2.23606797749979, 27: 2.0, 28: 1.0, 30: 1.0, 31: 2.0, 37: 2.23606797749979, 38: 2.0, 39: 2.23606797749979}, 30: {20: 2.23606797749979, 21: 2.0, 22: 2.23606797749979, 28: 2.0, 29: 1.0, 31: 1.0, 32: 2.0, 38: 2.23606797749979, 39: 2.0, 40: 2.23606797749979}, 31: {21: 2.23606797749979, 22: 2.0, 23: 2.23606797749979, 29: 2.0, 30: 1.0, 32: 1.0, 33: 2.0, 39: 2.23606797749979, 40: 2.0, 41: 2.23606797749979}, 32: {22: 2.23606797749979, 23: 2.0, 24: 2.23606797749979, 30: 2.0, 31: 1.0, 33: 1.0, 34: 2.0, 40: 2.23606797749979, 41: 2.0, 42: 2.23606797749979}, 33: {23: 2.23606797749979, 24: 2.0, 25: 2.23606797749979, 31: 2.0, 32: 1.0, 34: 1.0, 35: 2.0, 41: 2.23606797749979, 42: 2.0, 43: 2.23606797749979}, 34: {24: 2.23606797749979, 25: 2.0, 26: 2.23606797749979, 32: 2.0, 33: 1.0, 35: 1.0, 42: 2.23606797749979, 43: 2.0, 44: 2.23606797749979}, 35: {25: 2.23606797749979, 26: 2.0, 33: 2.0, 34: 1.0, 43: 2.23606797749979, 44: 2.0}, 36: {27: 2.0, 28: 2.23606797749979, 37: 1.0, 38: 2.0, 45: 2.0, 46: 2.23606797749979}, 37: {27: 2.23606797749979, 28: 2.0, 29: 2.23606797749979, 36: 1.0, 38: 1.0, 39: 2.0, 45: 2.23606797749979, 46: 2.0, 47: 2.23606797749979}, 38: {28: 2.23606797749979, 29: 2.0, 30: 2.23606797749979, 36: 2.0, 37: 1.0, 39: 1.0, 40: 2.0, 46: 2.23606797749979, 47: 2.0, 48: 2.23606797749979}, 39: {29: 2.23606797749979, 30: 2.0, 31: 2.23606797749979, 37: 2.0, 38: 1.0, 40: 1.0, 41: 2.0, 47: 2.23606797749979, 48: 2.0, 49: 2.23606797749979}, 40: {30: 2.23606797749979, 31: 2.0, 32: 2.23606797749979, 38: 2.0, 39: 1.0, 41: 1.0, 42: 2.0, 48: 2.23606797749979, 49: 2.0, 50: 2.23606797749979}, 41: {31: 2.23606797749979, 32: 2.0, 33: 2.23606797749979, 39: 2.0, 40: 1.0, 42: 1.0, 43: 2.0, 49: 2.23606797749979, 50: 2.0, 51: 2.23606797749979}, 42: {32: 2.23606797749979, 33: 2.0, 34: 2.23606797749979, 40: 2.0, 41: 1.0, 43: 1.0, 44: 2.0, 50: 2.23606797749979, 51: 2.0, 52: 2.23606797749979}, 43: {33: 2.23606797749979, 34: 2.0, 35: 2.23606797749979, 41: 2.0, 42: 1.0, 44: 1.0, 51: 2.23606797749979, 52: 2.0, 53: 2.23606797749979}, 44: {34: 2.23606797749979, 35: 2.0, 42: 2.0, 43: 1.0, 52: 2.23606797749979, 53: 2.0}, 45: {36: 2.0, 37: 2.23606797749979, 46: 1.0, 47: 2.0, 54: 2.0, 55: 2.23606797749979}, 46: {36: 2.23606797749979, 37: 2.0, 38: 2.23606797749979, 45: 1.0, 47: 1.0, 48: 2.0, 54: 2.23606797749979, 55: 2.0, 56: 2.23606797749979}, 47: {37: 2.23606797749979, 38: 2.0, 39: 2.23606797749979, 45: 2.0, 46: 1.0, 48: 1.0, 49: 2.0, 55: 2.23606797749979, 56: 2.0, 57: 2.23606797749979}, 48: {38: 2.23606797749979, 39: 2.0, 40: 2.23606797749979, 46: 2.0, 47: 1.0, 49: 1.0, 50: 2.0, 56: 2.23606797749979, 57: 2.0, 58: 2.23606797749979}, 49: {39: 2.23606797749979, 40: 2.0, 41: 2.23606797749979, 47: 2.0, 48: 1.0, 50: 1.0, 51: 2.0, 57: 2.23606797749979, 58: 2.0, 59: 2.23606797749979}, 50: {40: 2.23606797749979, 41: 2.0, 42: 2.23606797749979, 48: 2.0, 49: 1.0, 51: 1.0, 52: 2.0, 58: 2.23606797749979, 59: 2.0, 60: 2.23606797749979}, 51: {41: 2.23606797749979, 42: 2.0, 43: 2.23606797749979, 49: 2.0, 50: 1.0, 52: 1.0, 53: 2.0, 59: 2.23606797749979, 60: 2.0, 61: 2.23606797749979}, 52: {42: 2.23606797749979, 43: 2.0, 44: 2.23606797749979, 50: 2.0, 51: 1.0, 53: 1.0, 60: 2.23606797749979, 61: 2.0, 62: 2.23606797749979}, 53: {43: 2.23606797749979, 44: 2.0, 51: 2.0, 52: 1.0, 61: 2.23606797749979, 62: 2.0}, 54: {45: 2.0, 46: 2.23606797749979, 55: 1.0, 56: 2.0, 63: 2.0, 64: 2.23606797749979}, 55: {45: 2.23606797749979, 46: 2.0, 47: 2.23606797749979, 54: 1.0, 56: 1.0, 57: 2.0, 63: 2.23606797749979, 64: 2.0, 65: 2.23606797749979}, 56: {46: 2.23606797749979, 47: 2.0, 48: 2.23606797749979, 54: 2.0, 55: 1.0, 57: 1.0, 58: 2.0, 64: 2.23606797749979, 65: 2.0, 66: 2.23606797749979}, 57: {47: 2.23606797749979, 48: 2.0, 49: 2.23606797749979, 55: 2.0, 56: 1.0, 58: 1.0, 59: 2.0, 65: 2.23606797749979, 66: 2.0, 67: 2.23606797749979}, 58: {48: 2.23606797749979, 49: 2.0, 50: 2.23606797749979, 56: 2.0, 57: 1.0, 59: 1.0, 60: 2.0, 66: 2.23606797749979, 67: 2.0, 68: 2.23606797749979}, 59: {49: 2.23606797749979, 50: 2.0, 51: 2.23606797749979, 57: 2.0, 58: 1.0, 60: 1.0, 61: 2.0, 67: 2.23606797749979, 68: 2.0, 69: 2.23606797749979}, 60: {50: 2.23606797749979, 51: 2.0, 52: 2.23606797749979, 58: 2.0, 59: 1.0, 61: 1.0, 62: 2.0, 68: 2.23606797749979, 69: 2.0, 70: 2.23606797749979}, 61: {51: 2.23606797749979, 52: 2.0, 53: 2.23606797749979, 59: 2.0, 60: 1.0, 62: 1.0, 69: 2.23606797749979, 70: 2.0, 71: 2.23606797749979}, 62: {52: 2.23606797749979, 53: 2.0, 60: 2.0, 61: 1.0, 70: 2.23606797749979, 71: 2.0}, 63: {54: 2.0, 55: 2.23606797749979, 64: 1.0, 65: 2.0, 72: 2.0, 73: 2.23606797749979}, 64: {54: 2.23606797749979, 55: 2.0, 56: 2.23606797749979, 63: 1.0, 65: 1.0, 66: 2.0, 72: 2.23606797749979, 73: 2.0, 74: 2.23606797749979}, 65: {55: 2.23606797749979, 56: 2.0, 57: 2.23606797749979, 63: 2.0, 64: 1.0, 66: 1.0, 67: 2.0, 73: 2.23606797749979, 74: 2.0, 75: 2.23606797749979}, 66: {56: 2.23606797749979, 57: 2.0, 58: 2.23606797749979, 64: 2.0, 65: 1.0, 67: 1.0, 68: 2.0, 74: 2.23606797749979, 75: 2.0, 76: 2.23606797749979}, 67: {57: 2.23606797749979, 58: 2.0, 59: 2.23606797749979, 65: 2.0, 66: 1.0, 68: 1.0, 69: 2.0, 75: 2.23606797749979, 76: 2.0, 77: 2.23606797749979}, 68: {58: 2.23606797749979, 59: 2.0, 60: 2.23606797749979, 66: 2.0, 67: 1.0, 69: 1.0, 70: 2.0, 76: 2.23606797749979, 77: 2.0, 78: 2.23606797749979}, 69: {59: 2.23606797749979, 60: 2.0, 61: 2.23606797749979, 67: 2.0, 68: 1.0, 70: 1.0, 71: 2.0, 77: 2.23606797749979, 78: 2.0, 79: 2.23606797749979}, 70: {60: 2.23606797749979, 61: 2.0, 62: 2.23606797749979, 68: 2.0, 69: 1.0, 71: 1.0, 78: 2.23606797749979, 79: 2.0, 80: 2.23606797749979}, 71: {61: 2.23606797749979, 62: 2.0, 69: 2.0, 70: 1.0, 79: 2.23606797749979, 80: 2.0}, 72: {63: 2.0, 64: 2.23606797749979, 73: 1.0, 74: 2.0, 81: 2.0, 82: 2.23606797749979}, 73: {63: 2.23606797749979, 64: 2.0, 65: 2.23606797749979, 72: 1.0, 74: 1.0, 75: 2.0, 81: 2.23606797749979, 82: 2.0, 83: 2.23606797749979}, 74: {64: 2.23606797749979, 65: 2.0, 66: 2.23606797749979, 72: 2.0, 73: 1.0, 75: 1.0, 76: 2.0, 82: 2.23606797749979, 83: 2.0, 84: 2.23606797749979}, 75: {65: 2.23606797749979, 66: 2.0, 67: 2.23606797749979, 73: 2.0, 74: 1.0, 76: 1.0, 77: 2.0, 83: 2.23606797749979, 84: 2.0, 85: 2.23606797749979}, 76: {66: 2.23606797749979, 67: 2.0, 68: 2.23606797749979, 74: 2.0, 75: 1.0, 77: 1.0, 78: 2.0, 84: 2.23606797749979, 85: 2.0, 86: 2.23606797749979}, 77: {67: 2.23606797749979, 68: 2.0, 69: 2.23606797749979, 75: 2.0, 76: 1.0, 78: 1.0, 79: 2.0, 85: 2.23606797749979, 86: 2.0, 87: 2.23606797749979}, 78: {68: 2.23606797749979, 69: 2.0, 70: 2.23606797749979, 76: 2.0, 77: 1.0, 79: 1.0, 80: 2.0, 86: 2.23606797749979, 87: 2.0, 88: 2.23606797749979}, 79: {69: 2.23606797749979, 70: 2.0, 71: 2.23606797749979, 77: 2.0, 78: 1.0, 80: 1.0, 87: 2.23606797749979, 88: 2.0, 89: 2.23606797749979}, 80: {70: 2.23606797749979, 71: 2.0, 78: 2.0, 79: 1.0, 88: 2.23606797749979, 89: 2.0}, 81: {72: 2.0, 73: 2.23606797749979, 82: 1.0, 83: 2.0}, 82: {72: 2.23606797749979, 73: 2.0, 74: 2.23606797749979, 81: 1.0, 83: 1.0, 84: 2.0}, 83: {73: 2.23606797749979, 74: 2.0, 75: 2.23606797749979, 81: 2.0, 82: 1.0, 84: 1.0, 85: 2.0}, 84: {74: 2.23606797749979, 75: 2.0, 76: 2.23606797749979, 82: 2.0, 83: 1.0, 85: 1.0, 86: 2.0}, 85: {75: 2.23606797749979, 76: 2.0, 77: 2.23606797749979, 83: 2.0, 84: 1.0, 86: 1.0, 87: 2.0}, 86: {76: 2.23606797749979, 77: 2.0, 78: 2.23606797749979, 84: 2.0, 85: 1.0, 87: 1.0, 88: 2.0}, 87: {77: 2.23606797749979, 78: 2.0, 79: 2.23606797749979, 85: 2.0, 86: 1.0, 88: 1.0, 89: 2.0}, 88: {78: 2.23606797749979, 79: 2.0, 80: 2.23606797749979, 86: 2.0, 87: 1.0, 89: 1.0}, 89: {79: 2.23606797749979, 80: 2.0, 87: 2.0, 88: 1.0}}
    start_index = 7
    goal_index = 89

    {9: (-4.0, 18), 19: (-3.0, 18), 29: (-2.0, 18), 39: (-1.0, 18), 49: (0.0, 18), 59: (1.0, 18), 69: (2.0, 18), 79: (3.0, 18), 89: (4.0, 18)}
    
    astar = AStar(points, graph, start_index, goal_index)
    shortest_path_indices = astar.astar_search()
    
    print(shortest_path_indices)
    astar.plot_graph(shortest_path_indices)
    if shortest_path_indices:
        shortest_path = [points[index] for index in shortest_path_indices]
        print("Shortest path:", shortest_path)
    else:
        print("No path found")
